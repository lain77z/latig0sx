#!/bin/sh

# Copyright (c) 2012/2015 lain <laina@riseup.net>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     1) Redistributions of source code must retain the above copyright
#        notice, this list of conditions and the following disclaimer.
#     2) Redistributions in binary form must reproduce the above copyright
#        notice, this list of conditions and the following disclaimer in the
#        documentation and/or other materials provided with the distribution.
#     3) Neither the name of the <organization> nor the
#        names of its contributors may be used to endorse or promote products
#        derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

echo -------------------------------------------
echo " Latigo - OS X Hardening                 "
echo "     by lain                             "
echo -------------------------------------------

if [ $# -lt 2 ] || [ $# -gt 2 ]
then
        echo "\n Usage: sudo $0 -u <user>\n"
        exit 0
fi

if [ $1 == "-u" ]
then
        inuser=$2
else
        echo "\n Usage: sudo $0 -u <user>\n"
        exit 0
fi

## Check if user input exists
if [ -z "$(grep $inuser /etc/passwd)" ] && [ ! -d /Users/$inuser ]
then
        echo "\nError - User $inuser doesn't exist. Enter a valid user\n "
        exit 0
fi

echo "\n[[Configuration Overview]]"

printf "\tSet Kern Secure Level [y/n] (y) ? "
read kernsec
if [ -z $kernsec ] || [ $kernsec == "y" ] 
then  
	printf "\t \tLevel Options: 0 (Insecure) 1 (Secure) 2 (Highly secure) [0/1/2] (1) ? "  
	read secoption
	if [ -n $secoption ] && [ $secoption == "0" ]
	then
		sysctl -w kern.securelevel=0 | 2>&1 | 1>/dev/null
		echo "\t \tDone - kern.securelevel set to $secoption"
	fi
	if [ -z $secoption ] || [ $secoption == "1" ]
        then
                sysctl -w kern.securelevel=1 | 2>&1 | 1>/dev/null
                echo "\t \tDone - kern.securelevel set to $secoption"
        fi
	if [ -n $secoption ] && [ $secoption == "2" ]
        then
                sysctl -w kern.securelevel=2 | 2>&1 | 1>/dev/null
                echo "\t \tDone - kern.securelevel set to $secoption"
        fi
fi

printf "\tCreate daemon for downloading and installing the latest Software Updates [y/n] (y) ? "
read softupdate
if [ -z $softupdate ] || [ $softupdate == "y" ]
then
	if [ -f conf/com.softwareupdate.plist ]
	then
		cp conf/com.softwareupdate.plist /System/Library/LaunchDaemons/
		chown root:wheel /System/Library/LaunchDaemons/com.softwareupdate.plist
		launchctl load -w /System/Library/LaunchDaemons/com.softwareupdate.plist > /dev/null 2>&1
		echo "\t \tDone - com.softwareupdate.plist daemon loaded" 
		launchctl start com.softwareupdate
		echo "\t \tDone - com.softwareupdate.plist daemon started"
	fi
fi

echo "\n[[System Hardware]]"

printf "\tSet Disk Quotas [y/n] (y) ? "
read diskquota
if [ -z $diskquota ] || [ $diskquota == "y" ]
then
	touch /.quota.ops.user
	touch /.quota.ops.group
	quotaon -a
	edquota $inuser
	echo "\t \tDone - Disk Quotas enabled"
fi

echo "\n[[Global System Settings]]"

printf "\tSet NVRAM Security Mode to Full [y/n] (y) ? "
read nvram
if [ -z $nvram ] || [ $nvram == "y" ]
then
	#full -> All commands except go require the security-password
	nvram security-mode="full"
	echo "\t \tDone - NVRAM security-mode is set to full" 
fi

printf "\tEnable Security Auditing [y/n] (y) ? "
read secaudit
if [ -z $secaudit ] || [ $secaudit == "y" ]
then
	if [ "$(grep "^AUDIT" /etc/hostconfig)" ]
	then
		if [ -z "$(grep "^AUDIT=-YES-" /etc/hostconfig)" ]
		then
			sed 's/^AUDIT.*$/AUDIT=-YES-/g' /etc/hostconfig > /etc/hostconfig.tmp
			cp /etc/hostconfig.tmp /etc/hostconfig
			rm /etc/hostconfig.tmp
		fi
	else
		echo AUDIT=-YES- >> /etc/hostconfig
	fi
	echo "\t \tDone - AUDIT=-YES in /etc/hostconfig"
	launchctl load -w /System/Library/LaunchDaemons/com.apple.auditd.plist > /dev/null 2>&1
	echo "\t \tDone - com.apple.auditd loaded"
	launchctl start com.apple.auditd
	echo "\t \tDone - com.apple.auditd started"
fi

echo "\n[[System Preferences]]"

printf "\tDisable IPv6 [y/n] (y) ? "
read ipvseis
if [ -z $ipvseis ] || [ $ipvseis == "y" ]
then
	networksetup -listnetworkserviceorder | grep "Hardware Port" | sed 's/(Hardware Port: //' | sed 's/,.*//' | \
	while read i
	do
		networksetup -setv6off "$i"
	done
	echo "\t \tDone - IPv6 Network interfaces set off"
fi

printf "\tDisable Bluetooth Controller [y/n] (y) ? "
read blcontr
if [ -z $blcontr ] || [ $blcontr == "y" ]
then
	defaults write /Library/Preferences/com.apple.Bluetooth/ControllerPowerState -int 0 2>/dev/null
	echo "\t \tDone - Bluetooth Controller disabled"
fi

printf "\tDisable IR remote control [y/n] (y) ? "
read irremcontr
if [ -z $irremcontr ] || [ $irremcontr == "y" ]
then
	defaults write /Library/Preferences/com.apple.driver.AppleIRController DeviceEnabled -bool no
	echo "\t \tDone - IR remote control disabled"
fi

printf "\tDisable internal microphone or line-in [y/n] (y) ? "
read microph
if [ -z $microph ] || [ $microph == "y" ]
then
	osascript -e "set volume input volume 0"
	echo "\t \tDone - internal microphone disabled"
fi

printf "\tEnable Application Firewall Logging [y/n] (y) ? "
read apfwlog
if [ -z $apfwlog ] || [ $apfwlog == "y" ]
then
	defaults write /Library/Preferences/com.apple.alf loggingenabled 1
	echo "\t \tDone - Application firewall logging enabled"
fi

printf "\tEnable Firewall (IPFW) Logging [y/n] (y) ? "
read fwlog
if [ -z $fwlog ] || [ $fwlog == "y" ]
then
	sysctl -w net.inet.ip.fw.verbose=2 | 2>&1 | 1>/dev/null
	echo "\t \tDone - IPFW logging enabled"
fi

echo "\n[[Accounts Preferences]]"

printf "\tDisable root account [y/n] (y) ? "
read disroot
if [ -z $disroot ] || [ $disroot == "y" ]
then 
	dsenableroot -d
	echo "\t \tDone - root account disabled"
fi

printf "\tSecure User's Home Folder Permissions [y/n] (y) ? "
read usrfoldperm
if [ -z $usrfoldperm ] || [ $usrfoldperm == "y" ]
then
	chmod go-rx /Users/$inuser/
	echo "\t \tDone - $inuser home folder permissions set to go-rx"
fi

printf "\tSecure /usr/bin/dscl [y/n] (y) ? "
read secdscl
if [ -z $secdscl ] || [ $secdscl == "y" ]
then
	chmod 100 /usr/bin/dscl
	echo "\t \tDone - /usr/bin/dscl sets to 100"
fi

printf "\tDisable Setuid and Setgid [y/n] (y) ? "
read uidgid
if [ -z $uidgid ] || [ $uidgid == "y" ]
then
	bins=(
	/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/MacOS/ARDAgent 
	/System/Library/Printers/IOMs/LPRIOM.plugin/Contents/MacOS/LPRIOMHelper
	/sbin/mount_nfs
	/usr/bin/at
	/usr/bin/atq
	/usr/bin/atrm
	/usr/bin/chpass
	/usr/bin/crontab
	/usr/bin/ipcs
	/usr/bin/newgrp 
	/usr/bin/postdrop
	/usr/bin/wall 
	/usr/bin/write 
	/usr/bin/rcp
	/bin/rcp
	/usr/bin/rlogin 
	/usr/bin/rsh
	/usr/lib/sa/sadc 
	/usr/sbin/scselect
	/usr/sbin/traceroute
	/usr/sbin/traceroute6)
	for u in 
	do
		chmod ug-s $u 2>/dev/null
	done
	echo "\t \tDone - Setuid and Setgid binaries disabled"
fi

printf "\tFlush Directory Service cache [y/n] (y) ? "
read dscache
if [ -z $dscache ] || [ $dscache == "y" ]
then
	dscacheutil -flushcache
	echo "\t \tDone - Entire cache flushed"
fi

printf "\tEnable Timestamps in Bash History [y/n] (y) ? "
read tmstamps
if [ -z $tmstamps ] || [ $tmstamps == "y" ]
then
	if [ "$(grep "^export HISTTIMEFORMAT" /Users/$inuser/.profile)" ]
	then
		if [ -z "$(grep "^export HISTTIMEFORMAT=\"\[%m.%d.%y\]@\[%T\] \"" /Users/$inuser/.profile)" ]
		then
			sed 's/^export HISTTIMEFORMAT.*$/export HISTTIMEFORMAT="[%m.%d.%y]@[%T] "/g' /Users/$inuser/.profile > /Users/$inuser/.profile.tmp
			cp /Users/$inuser/.profile.tmp /Users/$inuser/.profile
			rm /Users/$inuser/.profile.tmp
		fi
	else
		echo 'export HISTTIMEFORMAT="[%m.%d.%y]@[%T] "' >> /Users/$inuser/.profile
	fi
	echo "\t \tDone - HISTTIMEFORMAT variable set in /Users/$inuser/.profile"
fi 

echo "\n[[Applications]"

printf "\tDisable iSight camera [y/n] (y) ? "
read isight
if [ -z $isight ] || [ $isight == "y" ]
then
	drivers=(
	/System/Library/QuickTime/QuickTimeUSBVDCDigitizer.component/Contents/MacOS/QuickTimeUSBVDCDigitizer
	/System/Library/PrivateFrameworks/CoreMediaIOServicesPrivate.framework/Versions/A/Resources/VDC.plugin/Contents/MacOS/VDC
	/System/Library/PrivateFrameworks/CoreMediaIOServices.framework/Versions/A/Resources/VDC.plugin/Contents/MacOS/VDC
)
	for d in
	do
        	/bin/chmod a-r $d 2>/dev/null    
	done
	echo "\t \tDone - iSight camera disabled"
fi

echo "\n[[System Utilities]]"

if [ "$(srm 2>&1 | grep "command not found")" ]
then
	printf "\tInstall Secure Remove (srm) and make alias to rm [y/n] (y) ? "
	read secrm
	if [ -z $secrm ] || [ $secrm == "y" ]
	then
		if [ -z "$(port 2>&1 | grep "command not found")" ] 
		then
			port install srm
			alias rm=srm	
			echo "\t \tDone - srm installed and rm alias to srm created"
		else
			echo "\t \tMacPorts must be installed"
		fi
	fi
else
	printf "\tSecure Remove (srm) is installed. Make alias to rm [y/n] (y) ? "
	read secrm
        if [ -z $secrm ] || [ $secrm == "y" ]
	then
		alias rm=srm
                echo "\t \tDone - rm alias to srm"	
	fi
fi

printf "\tEnable Finder secure remove [y/n] (y) ? "
read findsrm
if [ -z $findsrm ] || [ $findsrm == "y" ]
then
	defaults write com.apple.finder EmptyTrashSecurely -bool true
	killall Finder
	echo "\t \tDone - EmptyTrashSecurely on com.apple.finder sets to true"
fi

printf "\tUpdate Backup Time Machine Intervals [y/n] (y) ? "
read bktm
if [ -z $bktm ] || [ $bktm == "y" ]
then
	if [ -f conf/com.apple.backup-auto.plist ]
        then
		cp conf/com.apple.backupd-auto.plist /System/Library/LaunchDaemons/
		chown root:wheel /System/Library/LaunchDaemons/com.apple.backupd-auto.plist
		launchctl load -w /System/Library/LaunchDaemons/com.apple.backupd-auto.plist > /dev/null 2>&1
		echo "\t \tDone - Updated StartInterval to 3600 on Daemon com.apple.backupd-auto"	
		launchctl start com.apple.backupd-auto
		echo "\t \tDone - Daemon com.apple.backupd-auto started"
	fi
fi

echo "\n[[Network Services]]"

printf "\tDisable Unnecessary Services [y/n] (y) ? "
read services
if [ -z $services ] || [ $services == "y" ]
then
	srvDaemons=(
	com.apple.blued
	com.apple.IIDCAssistant
	com.apple.nis.ypbind
	com.apple.racoon 
	com.apple.RemoteDesktop.PrivilegeProxy 
	com.apple.RFBEventHelper 
	com.apple.UserNotificationCenter
	com.apple.webdavfs_load_kext
	org.postfix.master
	com.apple.efax
	ssh)
	for s in ${srvDaemons[@]}
	do
		launchctl unload -w /System/Library/LaunchDaemons/$s.plist	1>&2 2>/dev/null
	done


	srvAgents=(
	com.apple.RemoteDesktop 
	com.apple.RemoteUI
	)
	for a in ${srvAgents[@]}
	do
		launchctl unload -w /System/Library/LaunchAgents/$a.plist 1>&2 2>/dev/null
	done
	echo "\t \tDone - Unnecessary Services disabled"
fi

printf "\tDisable Remote Desktop [y/n] (y) ? "
read remotedesk
if [ -z $remotedesk ] || [ $remotedesk == "y" ] 
then
	/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -deactivate -stop 2>/dev/null
	echo "\t \tDone - Remote Desktop disabled"
fi

printf "\tChange the global umask file permission [y/n] (y) ? "
read umaskperm
if [ -z $umaskperm ] || [ $umaskperm == "y" ]
then
	if [ -f /etc/launchd.conf ]
	then
		if [ "$(grep "^umask" /etc/launchd.conf)" ]
		then
			if [ -z "$(grep "^umask 077" /etc/launchd.conf)" ]
			then
				sed 's/umask.*$/umask\ 077/g' /etc/launchd.conf > /etc/launchd.conf.tmp
				cp /etc/launchd.conf.tmp /etc/launchd.conf
				rm /etc/launchd.conf.tmp
			fi
		else
			echo "umask 077" >> /etc/launchd.conf
		fi
		echo "\t \tDone - global umask file permission changed to 077"
	else
		echo "umask 077" >> /etc/launchd.conf
		echo "\t \tDone - global umask file permission changed to 077"
	fi
fi

echo "\n[[Check Data and Using Encryption]]" 

printf "\tEnable OCSP Revocation to Best Attempt [y/n] (y) ? "
read ocsp
if [ -z $ocsp ] || [ $ocsp == "y" ]
then
	defaults write com.apple.security.revocation OCSPStyle -string BestAttempt
	echo "\t \tDone - Setting OCSPStyle com.apple.security.revocation to BestAttempt"
        echo "\t \tDon't forget setting Priority to OCSP on Keychain Access > Preferences > Certificates tab"
fi

printf "\tEnable CRL Revocation to Best Attempt [y/n] (y) ? "
read crl
if [ -z $crl ] || [ $crl == "y" ]
then
	defaults write com.apple.security.revocation CRLStyle -string BestAttempt
        echo "\t \tDone - Setting CRLStyle com.apple.security.revocation to BestAttempt"
fi

echo "\n[[Manual Configuration]]"
echo "\tFolderActions (AppleScript) on LaunchAgents and LaunchDaemons - add new item alert.scpt for overwrite protection"

echo "\n--------------------------------"
exit 0
